% Generated by MATLAB(R) 24.1 (R2024a) and Satellite Communications Toolbox 24.1 (R2024a).
% Generated on: 19-Sep-2025 13:23:39

%% Link Details
% Link         L1 L2 L3
% Transmitter  G1 S2 S3
% Receiver     S1 G2 S4

%% Ground station (G1) properties
g1.Latitude = 42.3; % deg
g1.Longitude = -71.35; % deg
g1.Altitude = 20; % m

%% Satellite (S1) properties
s1.Latitude = 35; % deg
s1.Longitude = -40; % deg
s1.Altitude = 2000; % km

%% Ground station (G1) transmitter properties
tx1.TxFeederLoss = 2; % dB
tx1.OtherTxLosses = 3; % dB
tx1.TxHPAPower = 14; % dBW
tx1.TxHPAOBO = 6; % dB
tx1.TxAntennaGain = 30; % dBi

%% Satellite (S1) receiver properties
rx1.InterferenceLoss = 2; % dB
rx1.RxGByT = 25; % dB/K
rx1.RxFeederLoss = 1; % dB
rx1.OtherRxLosses = 1; % dB

%% Link (L1) properties
l1.Frequency = 14; % GHz
l1.Bandwidth = 6; % MHz
l1.BitRate = 10; % Mbps
l1.RequiredEbByNo = 10; % dB
l1.PolarizationMismatch = 45; % deg
l1.ImplementationLoss = 2; % dB
l1.AntennaMispointingLoss = 1; % dB
l1.RadomeLoss = 1; % dB

%% Satellite (S2) properties
s2.Latitude = 25; % deg
s2.Longitude = 5; % deg
s2.Altitude = 35786; % km

%% Ground station (G2) properties
g2.Latitude = 17.43; % deg
g2.Longitude = 78.35; % deg
g2.Altitude = 20; % m

%% Satellite (S2) transmitter properties
tx2.TxFeederLoss = 1; % dB
tx2.OtherTxLosses = 1; % dB
tx2.TxHPAPower = 17; % dBW
tx2.TxHPAOBO = 6; % dB
tx2.TxAntennaGain = 38; % dBi

%% Ground station (G2) receiver properties
rx2.InterferenceLoss = 2; % dB
rx2.RxGByT = 25; % dB/K
rx2.RxFeederLoss = 1; % dB
rx2.OtherRxLosses = 1; % dB

%% Link (L2) properties
l2.Frequency = 11; % GHz
l2.Bandwidth = 6; % MHz
l2.BitRate = 10; % Mbps
l2.RequiredEbByNo = 10; % dB
l2.PolarizationMismatch = 45; % deg
l2.ImplementationLoss = 2; % dB
l2.AntennaMispointingLoss = 1; % dB
l2.RadomeLoss = 1; % dB

%% Satellite (S3) properties
s3.Latitude = 35; % deg
s3.Longitude = -40; % deg
s3.Altitude = 2000000; % m

%% Satellite (S4) properties
s4.Latitude = 25; % deg
s4.Longitude = 5; % deg
s4.Altitude = 35786; % km

%% Satellite (S3) transmitter properties
tx3.TxFeederLoss = 1; % dB
tx3.OtherTxLosses = 1; % dB
tx3.TxHPAPower = 17; % dBW
tx3.TxHPAOBO = 6; % dB
tx3.TxAntennaGain = 38; % dBi

%% Satellite (S4) receiver properties
rx3.InterferenceLoss = 2; % dB
rx3.RxGByT = 25; % dB/K
rx3.RxFeederLoss = 1; % dB
rx3.OtherRxLosses = 1; % dB

%% Link (L3) properties
l3.Frequency = 14; % GHz
l3.Bandwidth = 6; % MHz
l3.BitRate = 10; % Mbps
l3.RequiredEbByNo = 10; % dB
l3.PolarizationMismatch = 45; % deg
l3.ImplementationLoss = 2; % dB
l3.AntennaMispointingLoss = 1; % dB
l3.RadomeLoss = 0; % dB

%% Calculate and visualize link budget results
res1 = calculateLinkBudget(g1,s1,tx1,rx1,l1);
res2 = calculateLinkBudget(g2,s2,tx2,rx2,l2);
res3 = calculateLinkBudget(s3,s4,tx3,rx3,l3);
colName = {'Tag','Name', 'L1','L2','L3'};
colWidthData = 2*(10-3*1.5 -1);
width = strcat(num2str(colWidthData),'x');
ColumnWidth = {'2x',width,'3x'};
colFormat = {'char','char','numeric'};
res = [res1 res2 res3];
data = {'N1','Distance (km)',res.Distance;...
    'N2','Elevation (deg)',res.Elevation;...
    'N3','Tx EIRP (dBW)',res.TxEIRP;...
    'N4','Polarization loss (dB)',res.PolarizationLoss;...
    'N5','FSPL (dB)',res.FSPL;...
    'N6','Received isotropic power (dBW)',res.ReceivedIsotropicPower;...
    'N7','C/No (dB-Hz)',res.CByNo;...
    'N8','C/N (dB)',res.CByN;...
    'N9','Received Eb/No (dB)',res.ReceivedEbByNo;...
    'N10','Margin (dB)',res.Margin};
fig = uifigure('Name','Link Budget');
uit = uitable(fig,'units','normalized',...
    'Position',[0 0 1 1],'RowName',{},...
    'ColumnName',colName,'ColumnWidth',ColumnWidth,...
    'ColumnFormat',colFormat,'Data',data);

%% FSPL line plot
nData = 9;
midPoint = ceil(nData/2);
xCurrentValue = zeros(length(res),1);
yCurrentValue = zeros(length(res),1);
hFig = uifigure('Name','FSPL');
hAx = axes('Parent', hFig);
spec = {g1;g2;s3};
sat = {s1;s2;s4};
tx = {tx1;tx2;tx3};
rx = {rx1;rx2;rx3};
lnk = {l1;l2;l3};
lnkName = {'L1','L2','L3','Operating Point'};
for ii = 1:length(res)
    yCurrentValue(ii) = res(ii).FSPL;
    xCurrentValue(ii) = res(ii).Distance;
    stepSize = xCurrentValue(ii)/midPoint;
    vectorSpecValue = (1:nData)'* stepSize;
    resultLine = calculateLinkBudget(spec{ii},sat{ii},tx{ii},rx{ii},lnk{ii},'FSPL',vectorSpecValue);
    plot(hAx,resultLine.Distance,resultLine.FSPL);
    hold(hAx,'on');
    grid(hAx,'on');
end
plot(hAx,xCurrentValue,yCurrentValue, 'r*');
legend(hAx,lnkName, 'Location', 'southeast');
hAx.XLabel.String = 'Distance (km)';
hAx.YLabel.String = 'Free space path loss (dB)';

%% Margin contour plot
for ii = 1:length(res)
    txContour  = tx{ii};
    xCurrentValue = txContour.TxHPAPower;
    xStepSize = xCurrentValue/midPoint;
    if stepSize == 0
        xValues = -1*floor(nData/2):floor(nData/2);
        txContour.TxHPAPower = xValues(1:nData);
    else
        txContour.TxHPAPower = sort((1:nData) * xStepSize);
    end
    yCurrentValue = res(ii).Distance;
    yStepSize = yCurrentValue/midPoint;
    vectorSpecValue = (1:nData)'* yStepSize;
    resultContour = calculateLinkBudget(spec{ii},sat{ii},txContour,rx{ii},lnk{ii},'Margin',vectorSpecValue);
    hFig = uifigure('Name',['Margin - ' lnkName{ii}]);
    hAx = axes('Parent', hFig);
    grid(hAx,'on');
    contour(hAx,txContour.TxHPAPower,resultContour.Distance,resultContour.Margin,'ShowText','on');
    hold(hAx,'on');
    plot(hAx,xCurrentValue,yCurrentValue, 'r*');
    legend(hAx,{'Margin (dB)', 'Operating Point'});
    hAx.XLabel.String = 'Tx HPA power (dBW)';
    hAx.YLabel.String = 'Distance (km)';
    hAx.ZLabel.String = 'Margin (dB)';
end

%% Local function for calculating link budget
function res = calculateLinkBudget(spec,sat,tx,rx,lnk,varargin)
assignin("base","struct1",spec);
assignin("base","struct2",sat);
assignin("base","struct3",tx);
assignin("base","struct4",rx);
assignin("base","struct5",lnk);
resultProperty = [];
resultVariable = [];
if nargin > 5
    resultVariable = varargin{1};
end
if nargin == 8
    resultProperty = varargin{2};
    resultValue = varargin{3};
end
params = {"Distance";"Elevation";"TxEIRP";"PolarizationLoss";...
    "FSPL";"ReceivedIsotropicPower";"CByNo";"CByN";...
    "ReceivedEbByNo";"Margin"};
eqns = {"satcom.internal.linkbudgetApp.computeDistance(struct1.Latitude, struct1.Longitude, struct1.Altitude, struct2.Latitude, struct2.Longitude, struct2.Altitude*1e3)";...
    "satcom.internal.linkbudgetApp.computeElevation(struct1.Latitude, struct1.Longitude, struct1.Altitude, struct2.Latitude, struct2.Longitude, struct2.Altitude*1e3)";...
    "struct3.TxHPAPower - struct3.TxHPAOBO - struct3.TxFeederLoss - struct3.OtherTxLosses + struct3.TxAntennaGain - struct5.RadomeLoss";...
    "20 * abs(log10(cosd(struct5.PolarizationMismatch)))";...
    "fspl(temp.Distance * 1e3, physconst('LightSpeed') ./ (struct5.Frequency*1e9))";...
    "temp.TxEIRP - temp.PolarizationLoss - temp.FSPL - struct4.InterferenceLoss - struct5.AntennaMispointingLoss";...
    "temp.ReceivedIsotropicPower + struct4.RxGByT - 10*log10(physconst('Boltzmann')) - struct4.RxFeederLoss - struct4.OtherRxLosses";...
    "temp.CByNo - 10*log10(struct5.Bandwidth) - 60";...
    "temp.CByNo - 10*log10(struct5.BitRate) - 60";...
    "temp.ReceivedEbByNo - struct5.RequiredEbByNo - struct5.ImplementationLoss"};
if nargin == 7
    vectorSpecValue = varargin{2};
    eqns{1} = mat2str(vectorSpecValue);
end
for ii = 1:length(params)
    varname = strcat("temp.",params{ii});
    if any(strcmp(resultProperty,params{ii}))
        evalin("base",sprintf("%s = %f;",varname,resultValue(strcmp(resultProperty,params{ii}))))
    else
        evalin("base",sprintf("%s = %s;",varname,eqns{ii}))
    end
    if strcmp(resultVariable,params{ii}) && ~isempty(resultVariable)
        break;
    end
end
res = evalin("base","temp");
evalin("base","clear struct1 struct2 struct3 struct4 struct5 temp");
end